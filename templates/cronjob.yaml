apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-rasterexport
  labels:
    app: {{ .Release.Name }}-rasterexport  # Label added here
spec:
  schedule: {{ .Values.schedule }}
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: {{ .Release.Name }}-rasterexport  # Label added here
        spec:
          containers:
          - name: rasterexport-container
            image: {{ .Values.rasterexport.image.repository }}:{{ .Values.rasterexport.image.tag }}
            env:
            {{- range $key, $value := .Values.rasterexport.env_vars }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            volumeMounts:
            - name: pvc-data
              mountPath: /layerSources
              subPath: {{ .Values.subPathVolume }}
            ports:
            - containerPort: {{ .Values.service.targetPort }}
          restartPolicy: Never
          volumes:
          - name: pvc-data
            persistentVolumeClaim:
              claimName: {{ .Values.pvc.name }}


---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-rasteringestion-job
spec:
  schedule: {{ .Values.schedule }} # Adjust the schedule as needed
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: automation
          initContainers:
          - name: wait-for-rasterexport
            image: bitnami/kubectl:1.27
            command:
                - sh
                - -c
                - |
                  # Define the cron job prefix
                  CRONJOB_PREFIX="{{ .Release.Name }}-rasterexport"
                  NAMESPACE="qa" # Replace with your namespace if different

                  # Function to get the latest job name based on the cron job prefix
                  get_latest_job_name() {
                    kubectl get jobs -n "$NAMESPACE" --selector=job-name \
                    -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.metadata.creationTimestamp}{"\n"}{end}' | \
                    grep "^$CRONJOB_PREFIX" | sort -k2 -r | head -n 1 | cut -f1
                  }

                  # Wait for the job to appear
                  echo "Waiting for job with prefix $CRONJOB_PREFIX to appear..."
                  while true; do
                    JOB_NAME=$(get_latest_job_name)
                    if [ -n "$JOB_NAME" ]; then
                      echo "Found job: $JOB_NAME"
                      break
                    fi
                    sleep 5
                  done

                  # Function to check if the job has completed
                  is_job_completed() {
                    kubectl get job "$JOB_NAME" -n "$NAMESPACE" -o jsonpath='{.status.succeeded}' | grep -q "1"
                  }

                  # Wait for the job to complete
                  echo "Waiting for job $JOB_NAME to complete..."
                  while true; do
                    if is_job_completed; then
                      echo "Job $JOB_NAME has completed successfully."
                      break
                    fi
                    sleep 5
                  done
          containers:
          - name: rasteringestion-container
            image: {{ .Values.rasteringestion.image.repository }}:{{ .Values.rasteringestion.image.tag }}
            env:
            {{- range $key, $value := .Values.rasteringestion.env_vars }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            volumeMounts:
            - name: pvc-data
              mountPath: /layerSources
              subPath: {{ .Values.subPathVolume }}
          restartPolicy: Never
          volumes:
          - name: pvc-data
            persistentVolumeClaim:
              claimName: {{ .Values.pvc.name }}

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-colletlogs-job
spec:
  schedule: {{ .Values.schedule }}  # Adjust the schedule as needed
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: automation
          initContainers:
          - name: wait-for-rasteringestion
            image: bitnami/kubectl:1.27 #
            command:
                - sh
                - -c
                - |
                    #!/bin/bash

                    # Define the cron job prefix
                    CRONJOB_PREFIX="{{ .Release.Name }}-rasteringestion"
                    NAMESPACE="qa" # Replace with your namespace if different

                    # Function to get the latest job name based on the cron job prefix
                    get_latest_job_name() {
                      kubectl get jobs -n "$NAMESPACE" --selector=job-name \
                      -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.metadata.creationTimestamp}{"\n"}{end}' | \
                      grep "^$CRONJOB_PREFIX" | sort -k2 -r | head -n 1 | cut -f1
                    }

                    # Wait for the job to appear
                    echo "Waiting for job with prefix $CRONJOB_PREFIX to appear..."
                    while true; do
                      JOB_NAME=$(get_latest_job_name)
                      if [ -n "$JOB_NAME" ]; then
                        echo "Found job: $JOB_NAME"
                        break
                      fi
                      sleep 5
                    done

                    # Function to check if the job has completed
                    is_job_completed() {
                      kubectl get job "$JOB_NAME" -n "$NAMESPACE" -o jsonpath='{.status.succeeded}' | grep -q "1"
                    }

                    # Wait for the job to complete
                    echo "Waiting for job $JOB_NAME to complete..."
                    while true; do
                      if is_job_completed; then
                        echo "Job $JOB_NAME has completed successfully."
                        break
                      fi
                      sleep 5
                    done

          containers:
            - name: colletlogs-container
              image: {{ .Values.colletlogs.image.repository }}:{{ .Values.colletlogs.image.tag }}
              env:
              {{- range $key, $value := .Values.colletlogs.env_vars }}
              - name: {{ $key }}
                value: {{ $value | quote }}
              {{- end }}
              volumeMounts:
              - name: pvc-data
                mountPath: /layerSources
                subPath: {{ .Values.subPathVolume }}
          restartPolicy: Never
          volumes:
          - name: pvc-data
            persistentVolumeClaim:
              claimName: {{ .Values.pvc.name }}


                 
